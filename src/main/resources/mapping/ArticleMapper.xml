<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wang.haogui.yuanda.mapper.ArticleMapper">
  <resultMap id="BaseResultMap" type="wang.haogui.yuanda.model.Article">
    <id column="article_id" jdbcType="INTEGER" property="articleId" />
    <result column="article_title" jdbcType="VARCHAR" property="articleTitle" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="author_id" jdbcType="INTEGER" property="authorId" />
    <result column="check_status" jdbcType="TINYINT" property="checkStatus" />
    <result column="click_number" jdbcType="INTEGER" property="clickNumber" />
    <result column="hot_number" jdbcType="INTEGER" property="hotNumber" />
    <result column="agreement_number" jdbcType="INTEGER" property="agreementNumber" />
    <result column="disagreement_number" jdbcType="INTEGER" property="disagreementNumber" />
    <result column="comment_number" jdbcType="INTEGER" property="commentNumber" />
    <result column="recommend_number" jdbcType="INTEGER" property="recommendNumber" />
    <result column="check_admin_id" jdbcType="INTEGER" property="checkAdminId" />
    <result column="check_time" jdbcType="TIMESTAMP" property="checkTime" />
    <result column="picture_src" jdbcType="VARCHAR" property="pictureSrc" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
    <result column="author_name" jdbcType="VARCHAR" property="authorName" />
    <result column="author_picture" jdbcType="VARCHAR" property="authorPicture" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="wang.haogui.yuanda.model.Article">
    <result column="article_content" jdbcType="LONGVARCHAR" property="articleContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    article_id, article_title, create_time, update_time, author_id, check_status, click_number, 
    hot_number, agreement_number, disagreement_number, comment_number, recommend_number, 
    check_admin_id, check_time, picture_src, is_deleted, author_name, author_picture
  </sql>
  <sql id="Blob_Column_List">
    article_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="wang.haogui.yuanda.model.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="wang.haogui.yuanda.model.ArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="wang.haogui.yuanda.model.ArticleExample">
    delete from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="wang.haogui.yuanda.model.Article">
    <selectKey keyProperty="articleId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into article (article_title, create_time, update_time, 
      author_id, check_status, click_number, 
      hot_number, agreement_number, disagreement_number, 
      comment_number, recommend_number, check_admin_id, 
      check_time, picture_src, is_deleted, 
      author_name, author_picture, article_content
      )
    values (#{articleTitle,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{authorId,jdbcType=INTEGER}, #{checkStatus,jdbcType=TINYINT}, #{clickNumber,jdbcType=INTEGER}, 
      #{hotNumber,jdbcType=INTEGER}, #{agreementNumber,jdbcType=INTEGER}, #{disagreementNumber,jdbcType=INTEGER}, 
      #{commentNumber,jdbcType=INTEGER}, #{recommendNumber,jdbcType=INTEGER}, #{checkAdminId,jdbcType=INTEGER}, 
      #{checkTime,jdbcType=TIMESTAMP}, #{pictureSrc,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT}, 
      #{authorName,jdbcType=VARCHAR}, #{authorPicture,jdbcType=VARCHAR}, #{articleContent,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="wang.haogui.yuanda.model.Article">
    <selectKey keyProperty="articleId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleTitle != null">
        article_title,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="authorId != null">
        author_id,
      </if>
      <if test="checkStatus != null">
        check_status,
      </if>
      <if test="clickNumber != null">
        click_number,
      </if>
      <if test="hotNumber != null">
        hot_number,
      </if>
      <if test="agreementNumber != null">
        agreement_number,
      </if>
      <if test="disagreementNumber != null">
        disagreement_number,
      </if>
      <if test="commentNumber != null">
        comment_number,
      </if>
      <if test="recommendNumber != null">
        recommend_number,
      </if>
      <if test="checkAdminId != null">
        check_admin_id,
      </if>
      <if test="checkTime != null">
        check_time,
      </if>
      <if test="pictureSrc != null">
        picture_src,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="authorName != null">
        author_name,
      </if>
      <if test="authorPicture != null">
        author_picture,
      </if>
      <if test="articleContent != null">
        article_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleTitle != null">
        #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="authorId != null">
        #{authorId,jdbcType=INTEGER},
      </if>
      <if test="checkStatus != null">
        #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="clickNumber != null">
        #{clickNumber,jdbcType=INTEGER},
      </if>
      <if test="hotNumber != null">
        #{hotNumber,jdbcType=INTEGER},
      </if>
      <if test="agreementNumber != null">
        #{agreementNumber,jdbcType=INTEGER},
      </if>
      <if test="disagreementNumber != null">
        #{disagreementNumber,jdbcType=INTEGER},
      </if>
      <if test="commentNumber != null">
        #{commentNumber,jdbcType=INTEGER},
      </if>
      <if test="recommendNumber != null">
        #{recommendNumber,jdbcType=INTEGER},
      </if>
      <if test="checkAdminId != null">
        #{checkAdminId,jdbcType=INTEGER},
      </if>
      <if test="checkTime != null">
        #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pictureSrc != null">
        #{pictureSrc,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="authorName != null">
        #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorPicture != null">
        #{authorPicture,jdbcType=VARCHAR},
      </if>
      <if test="articleContent != null">
        #{articleContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="wang.haogui.yuanda.model.ArticleExample" resultType="java.lang.Long">
    select count(*) from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article
    <set>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.articleTitle != null">
        article_title = #{record.articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.authorId != null">
        author_id = #{record.authorId,jdbcType=INTEGER},
      </if>
      <if test="record.checkStatus != null">
        check_status = #{record.checkStatus,jdbcType=TINYINT},
      </if>
      <if test="record.clickNumber != null">
        click_number = #{record.clickNumber,jdbcType=INTEGER},
      </if>
      <if test="record.hotNumber != null">
        hot_number = #{record.hotNumber,jdbcType=INTEGER},
      </if>
      <if test="record.agreementNumber != null">
        agreement_number = #{record.agreementNumber,jdbcType=INTEGER},
      </if>
      <if test="record.disagreementNumber != null">
        disagreement_number = #{record.disagreementNumber,jdbcType=INTEGER},
      </if>
      <if test="record.commentNumber != null">
        comment_number = #{record.commentNumber,jdbcType=INTEGER},
      </if>
      <if test="record.recommendNumber != null">
        recommend_number = #{record.recommendNumber,jdbcType=INTEGER},
      </if>
      <if test="record.checkAdminId != null">
        check_admin_id = #{record.checkAdminId,jdbcType=INTEGER},
      </if>
      <if test="record.checkTime != null">
        check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.pictureSrc != null">
        picture_src = #{record.pictureSrc,jdbcType=VARCHAR},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.authorName != null">
        author_name = #{record.authorName,jdbcType=VARCHAR},
      </if>
      <if test="record.authorPicture != null">
        author_picture = #{record.authorPicture,jdbcType=VARCHAR},
      </if>
      <if test="record.articleContent != null">
        article_content = #{record.articleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      author_id = #{record.authorId,jdbcType=INTEGER},
      check_status = #{record.checkStatus,jdbcType=TINYINT},
      click_number = #{record.clickNumber,jdbcType=INTEGER},
      hot_number = #{record.hotNumber,jdbcType=INTEGER},
      agreement_number = #{record.agreementNumber,jdbcType=INTEGER},
      disagreement_number = #{record.disagreementNumber,jdbcType=INTEGER},
      comment_number = #{record.commentNumber,jdbcType=INTEGER},
      recommend_number = #{record.recommendNumber,jdbcType=INTEGER},
      check_admin_id = #{record.checkAdminId,jdbcType=INTEGER},
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      picture_src = #{record.pictureSrc,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      author_name = #{record.authorName,jdbcType=VARCHAR},
      author_picture = #{record.authorPicture,jdbcType=VARCHAR},
      article_content = #{record.articleContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      author_id = #{record.authorId,jdbcType=INTEGER},
      check_status = #{record.checkStatus,jdbcType=TINYINT},
      click_number = #{record.clickNumber,jdbcType=INTEGER},
      hot_number = #{record.hotNumber,jdbcType=INTEGER},
      agreement_number = #{record.agreementNumber,jdbcType=INTEGER},
      disagreement_number = #{record.disagreementNumber,jdbcType=INTEGER},
      comment_number = #{record.commentNumber,jdbcType=INTEGER},
      recommend_number = #{record.recommendNumber,jdbcType=INTEGER},
      check_admin_id = #{record.checkAdminId,jdbcType=INTEGER},
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      picture_src = #{record.pictureSrc,jdbcType=VARCHAR},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      author_name = #{record.authorName,jdbcType=VARCHAR},
      author_picture = #{record.authorPicture,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="wang.haogui.yuanda.model.Article">
    update article
    <set>
      <if test="articleTitle != null">
        article_title = #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="authorId != null">
        author_id = #{authorId,jdbcType=INTEGER},
      </if>
      <if test="checkStatus != null">
        check_status = #{checkStatus,jdbcType=TINYINT},
      </if>
      <if test="clickNumber != null">
        click_number = #{clickNumber,jdbcType=INTEGER},
      </if>
      <if test="hotNumber != null">
        hot_number = #{hotNumber,jdbcType=INTEGER},
      </if>
      <if test="agreementNumber != null">
        agreement_number = #{agreementNumber,jdbcType=INTEGER},
      </if>
      <if test="disagreementNumber != null">
        disagreement_number = #{disagreementNumber,jdbcType=INTEGER},
      </if>
      <if test="commentNumber != null">
        comment_number = #{commentNumber,jdbcType=INTEGER},
      </if>
      <if test="recommendNumber != null">
        recommend_number = #{recommendNumber,jdbcType=INTEGER},
      </if>
      <if test="checkAdminId != null">
        check_admin_id = #{checkAdminId,jdbcType=INTEGER},
      </if>
      <if test="checkTime != null">
        check_time = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pictureSrc != null">
        picture_src = #{pictureSrc,jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="authorName != null">
        author_name = #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="authorPicture != null">
        author_picture = #{authorPicture,jdbcType=VARCHAR},
      </if>
      <if test="articleContent != null">
        article_content = #{articleContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="wang.haogui.yuanda.model.Article">
    update article
    set article_title = #{articleTitle,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      author_id = #{authorId,jdbcType=INTEGER},
      check_status = #{checkStatus,jdbcType=TINYINT},
      click_number = #{clickNumber,jdbcType=INTEGER},
      hot_number = #{hotNumber,jdbcType=INTEGER},
      agreement_number = #{agreementNumber,jdbcType=INTEGER},
      disagreement_number = #{disagreementNumber,jdbcType=INTEGER},
      comment_number = #{commentNumber,jdbcType=INTEGER},
      recommend_number = #{recommendNumber,jdbcType=INTEGER},
      check_admin_id = #{checkAdminId,jdbcType=INTEGER},
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      picture_src = #{pictureSrc,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT},
      author_name = #{authorName,jdbcType=VARCHAR},
      author_picture = #{authorPicture,jdbcType=VARCHAR},
      article_content = #{articleContent,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="wang.haogui.yuanda.model.Article">
    update article
    set article_title = #{articleTitle,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      author_id = #{authorId,jdbcType=INTEGER},
      check_status = #{checkStatus,jdbcType=TINYINT},
      click_number = #{clickNumber,jdbcType=INTEGER},
      hot_number = #{hotNumber,jdbcType=INTEGER},
      agreement_number = #{agreementNumber,jdbcType=INTEGER},
      disagreement_number = #{disagreementNumber,jdbcType=INTEGER},
      comment_number = #{commentNumber,jdbcType=INTEGER},
      recommend_number = #{recommendNumber,jdbcType=INTEGER},
      check_admin_id = #{checkAdminId,jdbcType=INTEGER},
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      picture_src = #{pictureSrc,jdbcType=VARCHAR},
      is_deleted = #{isDeleted,jdbcType=BIT},
      author_name = #{authorName,jdbcType=VARCHAR},
      author_picture = #{authorPicture,jdbcType=VARCHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateForCommentNumber" parameterType="wang.haogui.yuanda.model.Article">
    update article
      <set>
          <if test="commentNumber == 1">
              comment_number = comment_number + 1
          </if>
          <if test="commentNumber == -1">
              comment_number = comment_number - 1
          </if>
      </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>

  <update id="updateCheckStatusByList" >
    update article
    set check_status = #{status}
    where article_id in
    (
      <foreach collection="list"  item="id" separator="," >
          #{id}
      </foreach>
    )
  </update>

  <insert id="batchInsert" useGeneratedKeys="true" keyProperty="articleId" parameterType="java.util.List">
      insert into article (article_title, create_time, update_time,
      author_id, check_status, click_number,
      hot_number, agreement_number, disagreement_number,
      comment_number, recommend_number, check_admin_id,
      check_time, picture_src, is_deleted,
      author_name, author_picture, article_content
      ) values
    <foreach collection="list" separator="," item="article">
      ( #{article.articleTitle,jdbcType=VARCHAR}, #{article.createTime,jdbcType=TIMESTAMP}, #{article.updateTime,jdbcType=TIMESTAMP},
        #{article.authorId,jdbcType=INTEGER}, #{article.checkStatus,jdbcType=TINYINT}, #{article.clickNumber,jdbcType=INTEGER},
        #{article.hotNumber,jdbcType=INTEGER}, #{article.agreementNumber,jdbcType=INTEGER}, #{article.disagreementNumber,jdbcType=INTEGER},
        #{article.commentNumber,jdbcType=INTEGER}, #{article.recommendNumber,jdbcType=INTEGER}, #{article.checkAdminId,jdbcType=INTEGER},
        #{article.checkTime,jdbcType=TIMESTAMP}, #{article.pictureSrc,jdbcType=VARCHAR}, #{article.isDeleted,jdbcType=BIT},
        #{article.authorName,jdbcType=VARCHAR}, #{article.authorPicture,jdbcType=VARCHAR}, #{article.articleContent,jdbcType=LONGVARCHAR}
      )
    </foreach>
  </insert>


  <select id="selectArticleByLabelId" parameterType="Map" resultMap="ResultMapWithBLOBs">
    select article_id articleId, article_content articleContent,article_title articleTitle, create_time createTime,
    update_time updateTime, author_id authorId,check_status checkStatus, click_number clickNumber,hot_number hotNumber,
     agreement_number agreementNumber,disagreement_number disagreementNumber,comment_number commentNumber, recommend_number recommendNumber,
    check_admin_id checkAdminId, check_time checkTime,picture_src pictureSrc,is_deleted isDeleted, author_name authorName,author_picture authorPicture
    from article where article_id in
    (
    select connect_id  from label_connection
    WHERE connect_type = 1 and is_deleted=0  and label_id =#{typeId}
    )
    <if test="str != null">
      order by ${str}
    </if>
  </select>

  <update id="decreaseCommentNumberByPrimaryKey">
    update article
     set comment_number = comment_number - #{number}
     where article_id=#{articleId}
  </update>
</mapper>